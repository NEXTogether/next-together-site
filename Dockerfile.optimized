# Dockerfile ottimizzato per Google Cloud Run - Next.js
FROM node:22-alpine AS base

# Installa dipendenze solo quando necessario
FROM base AS deps
# Aggiunge compatibilit√† libc necessaria
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Installa dipendenze basandosi su package manager preferito
COPY package.json package-lock.json* ./
RUN \
  if [ -f package-lock.json ]; then npm ci --only=production; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Ricostruzione del codice sorgente solo quando necessario
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Variabili ambiente per il build
ENV NODE_ENV=production
ENV NEXT_PUBLIC_SITE_URL=https://next-together.com
ENV NEXT_TELEMETRY_DISABLED=1

# Build dell'applicazione
RUN npm run build

# Immagine di produzione, copia tutti i file ed esegui next
FROM base AS runner
WORKDIR /app

# Variabili ambiente per runtime
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=8080
ENV HOSTNAME="0.0.0.0"

# Crea utente non-root per sicurezza
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copia file pubblici
COPY --from=builder /app/public ./public

# Imposta i permessi corretti per la cache di prerender
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Copia output standalone e file statici
# Sfrutta automaticamente le trace di output per ridurre la dimensione dell'immagine
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Cambia utente per sicurezza
USER nextjs

# Espone la porta 8080 (requisito Cloud Run)
EXPOSE 8080

# Comando di avvio
CMD ["node", "server.js"]